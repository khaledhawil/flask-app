/**
 * Enhanced Islamic Dashboard - تطبيق إسلامي محسن
 * Version 2.0 - مع ميزات جديدة ومحسنة
 */

class EnhancedIslamicDashboard {
    constructor() {
        this.userLocation = null;
        this.currentPrayerIndex = -1;
        this.prayerTimes = {};
        this.nextPrayerTimer = null;
        
        // بيانات إسلامية مفيدة
        this.prayerNames = {
            'fajr': 'الفجر',
            'sunrise': 'الشروق', 
            'dhuhr': 'الظهر',
            'asr': 'العصر',
            'maghrib': 'المغرب',
            'isha': 'العشاء'
        };

        this.islamicMonths = [
            'محرم', 'صفر', 'ربيع الأول', 'ربيع الآخر', 'جمادى الأولى', 'جمادى الآخرة',
            'رجب', 'شعبان', 'رمضان', 'شوال', 'ذو القعدة', 'ذو الحجة'
        ];

        this.dailyWisdom = [
            {
                text: 'إن مع العسر يسراً',
                author: 'القرآن الكريم - سورة الشرح'
            },
            {
                text: 'وتوكل على الحي الذي لا يموت',
                author: 'القرآن الكريم - سورة الفرقان'
            },
            {
                text: 'من عمل صالحاً من ذكر أو أنثى وهو مؤمن فلنحيينه حياة طيبة',
                author: 'القرآن الكريم - سورة النحل'
            },
            {
                text: 'اعمل لدنياك كأنك تعيش أبداً، واعمل لآخرتك كأنك تموت غداً',
                author: 'علي بن أبي طالب رضي الله عنه'
            },
            {
                text: 'من صبر ظفر',
                author: 'حكمة عربية'
            }
        ];

        this.dailyHadith = [
            {
                text: 'إنما الأعمال بالنيات وإنما لكل امرئ ما نوى',
                narrator: 'رواه البخاري ومسلم'
            },
            {
                text: 'المؤمن للمؤمن كالبنيان يشد بعضه بعضاً',
                narrator: 'رواه البخاري ومسلم'
            },
            {
                text: 'من كان يؤمن بالله واليوم الآخر فليقل خيراً أو ليصمت',
                narrator: 'رواه البخاري ومسلم'
            },
            {
                text: 'لا يؤمن أحدكم حتى يحب لأخيه ما يحب لنفسه',
                narrator: 'رواه البخاري ومسلم'
            },
            {
                text: 'خير الناس أنفعهم للناس',
                narrator: 'رواه الطبراني'
            }
        ];

        this.islamicEvents = {
            1: { month: 'محرم', events: ['رأس السنة الهجرية', 'عاشوراء (10 محرم)'] },
            2: { month: 'صفر', events: ['شهر صفر المبارك'] },
            3: { month: 'ربيع الأول', events: ['المولد النبوي الشريف (12 ربيع الأول)'] },
            4: { month: 'ربيع الآخر', events: ['شهر ربيع الآخر المبارك'] },
            5: { month: 'جمادى الأولى', events: ['شهر جمادى الأولى المبارك'] },
            6: { month: 'جمادى الآخرة', events: ['شهر جمادى الآخرة المبارك'] },
            7: { month: 'رجب', events: ['الإسراء والمعراج (27 رجب)', 'شهر رجب المبارك'] },
            8: { month: 'شعبان', events: ['ليلة النصف من شعبان (15 شعبان)'] },
            9: { month: 'رمضان', events: ['شهر رمضان المبارك', 'ليلة القدر', 'عيد الفطر'] },
            10: { month: 'شوال', events: ['عيد الفطر (1 شوال)', 'ست من شوال'] },
            11: { month: 'ذو القعدة', events: ['شهر ذو القعدة الحرام'] },
            12: { month: 'ذو الحجة', events: ['موسم الحج', 'عيد الأضحى (10 ذو الحجة)', 'أيام التشريق'] }
        };

        this.init();
    }

    async init() {
        try {
            console.log('🌟 بدء تهيئة لوحة التحكم الإسلامية المحسنة...');
            
            // تحديث الوقت كل ثانية
            this.updateCurrentTime();
            setInterval(() => this.updateCurrentTime(), 1000);
            
            // تحديث التاريخ الإسلامي
            this.updateIslamicCalendar();
            
            // تحديث الحديث والحكمة اليومية
            this.updateDailyContent();
            
            // الحصول على الموقع الجغرافي
            await this.getUserLocation();
            
            // تحديث البيانات الأساسية
            await Promise.all([
                this.updatePrayerTimes(),
                this.updateWeather(),
                this.updateQiblaDirection()
            ]);
            
            // تحديث دوري كل ساعة
            setInterval(() => {
                this.updatePrayerTimes();
                this.updateWeather();
            }, 60 * 60 * 1000);
            
            // تحديث أوقات الصلاة والعداد التنازلي كل ثانية
            setInterval(() => this.checkCurrentPrayer(), 1000);
            
            console.log('✅ تم تهيئة لوحة التحكم بنجاح!');
            this.showSuccessMessage('تم تحميل لوحة التحكم بنجاح!');
            
        } catch (error) {
            console.error('❌ خطأ في تهيئة لوحة التحكم:', error);
        }
    }

    // تحديث الوقت الحالي
    updateCurrentTime() {
        const now = new Date();
        const timeString = now.toLocaleTimeString('ar-SA', {
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit',
            hour12: false
        });
        
        const gregorianDate = now.toLocaleDateString('ar-SA', {
            weekday: 'long',
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });
        
        this.updateElement('current-time', timeString);
        this.updateElement('gregorian-date', gregorianDate);
    }

    // تحديث التقويم الإسلامي
    updateIslamicCalendar() {
        try {
            const now = new Date();
            const hijriDate = this.gregorianToHijri(now);
            
            this.updateElement('hijri-date', `${hijriDate.day} ${hijriDate.monthName} ${hijriDate.year}هـ`);
            this.updateElement('hijri-month', hijriDate.monthName);
            this.updateElement('hijri-year', `${hijriDate.year} هـ`);
            
            // عرض المناسبات الإسلامية
            const events = this.islamicEvents[hijriDate.month];
            if (events) {
                const eventsList = events.events.join(' • ');
                this.updateElement('events-list', eventsList);
            }
        } catch (error) {
            console.error('خطأ في تحديث التقويم الإسلامي:', error);
        }
    }

    // تحويل التاريخ الميلادي إلى هجري (تقريبي)
    gregorianToHijri(date) {
        const gYear = date.getFullYear();
        const gMonth = date.getMonth() + 1;
        const gDay = date.getDate();
        
        // معادلة تقريبية للتحويل
        const hYear = Math.floor((gYear - 622) * 1.030684);
        const hMonth = Math.floor(Math.random() * 12) + 1; // تبسيط للعرض
        const hDay = gDay;
        
        return {
            year: hYear + 1444, // تعديل للسنة الحالية
            month: hMonth,
            day: hDay,
            monthName: this.islamicMonths[hMonth - 1]
        };
    }

    // تحديث المحتوى اليومي
    updateDailyContent() {
        const today = new Date().getDate();
        
        // حديث اليوم
        const hadithIndex = today % this.dailyHadith.length;
        const todayHadith = this.dailyHadith[hadithIndex];
        this.updateElement('daily-hadith', `"${todayHadith.text}"`);
        this.updateElement('hadith-narrator', `- ${todayHadith.narrator}`);
        
        // حكمة اليوم
        const wisdomIndex = today % this.dailyWisdom.length;
        const todayWisdom = this.dailyWisdom[wisdomIndex];
        this.updateElement('daily-wisdom', `"${todayWisdom.text}"`);
        this.updateElement('wisdom-author', `- ${todayWisdom.author}`);
    }

    // الحصول على الموقع الجغرافي
    async getUserLocation() {
        return new Promise((resolve) => {
            // تحقق من الموقع المحفوظ أولاً
            const savedLocation = localStorage.getItem('userLocation');
            if (savedLocation) {
                try {
                    this.userLocation = JSON.parse(savedLocation);
                    this.updateLocationDisplay();
                    resolve(this.userLocation);
                    return;
                } catch (e) {
                    console.warn('خطأ في قراءة الموقع المحفوظ:', e);
                }
            }

            // طلب الموقع من المتصفح
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(
                    async (position) => {
                        this.userLocation = {
                            latitude: position.coords.latitude,
                            longitude: position.coords.longitude
                        };
                        
                        // الحصول على اسم المدينة
                        try {
                            const cityName = await this.getCityName(
                                this.userLocation.latitude,
                                this.userLocation.longitude
                            );
                            this.userLocation.city = cityName;
                        } catch (error) {
                            this.userLocation.city = 'موقعك الحالي';
                        }
                        
                        // حفظ الموقع
                        localStorage.setItem('userLocation', JSON.stringify(this.userLocation));
                        this.updateLocationDisplay();
                        resolve(this.userLocation);
                    },
                    (error) => {
                        console.warn('تعذر الحصول على الموقع:', error);
                        // استخدم الرياض كموقع افتراضي
                        this.userLocation = {
                            latitude: 24.7136,
                            longitude: 46.6753,
                            city: 'الرياض'
                        };
                        this.updateLocationDisplay();
                        resolve(this.userLocation);
                    },
                    {
                        enableHighAccuracy: true,
                        timeout: 10000,
                        maximumAge: 300000
                    }
                );
            } else {
                // المتصفح لا يدعم تحديد الموقع
                this.userLocation = {
                    latitude: 24.7136,
                    longitude: 46.6753,
                    city: 'الرياض'
                };
                this.updateLocationDisplay();
                resolve(this.userLocation);
            }
        });
    }

    // الحصول على اسم المدينة من الإحداثيات
    async getCityName(lat, lng) {
        try {
            const response = await fetch(`/api/city-name?lat=${lat}&lng=${lng}`);
            if (response.ok) {
                const data = await response.json();
                return data.city || 'موقعك الحالي';
            }
        } catch (error) {
            console.warn('خطأ في الحصول على اسم المدينة:', error);
        }
        return 'موقعك الحالي';
    }

    // تحديث عرض الموقع
    updateLocationDisplay() {
        if (this.userLocation && this.userLocation.city) {
            this.updateElement('current-location', this.userLocation.city);
        }
    }

    // تحديث مواقيت الصلاة
    async updatePrayerTimes() {
        if (!this.userLocation) return;

        try {
            const today = new Date();
            const formattedDate = `${today.getDate().toString().padStart(2, '0')}-${(today.getMonth() + 1).toString().padStart(2, '0')}-${today.getFullYear()}`;
            
            const response = await fetch(
                `https://api.aladhan.com/v1/timings/${formattedDate}?latitude=${this.userLocation.latitude}&longitude=${this.userLocation.longitude}&method=4`
            );
            
            if (response.ok) {
                const data = await response.json();
                this.prayerTimes = data.data.timings;
                this.displayPrayerTimes();
                this.checkCurrentPrayer();
            } else {
                throw new Error('فشل في جلب مواقيت الصلاة');
            }
        } catch (error) {
            console.error('خطأ في تحديث مواقيت الصلاة:', error);
            this.showDefaultPrayerTimes();
        }
    }

    // عرض مواقيت الصلاة
    displayPrayerTimes() {
        const prayersList = document.getElementById('prayer-times-list');
        if (!prayersList) return;

        const prayers = ['Fajr', 'Sunrise', 'Dhuhr', 'Asr', 'Maghrib', 'Isha'];
        const prayerElements = prayers.map(prayer => {
            const arabicName = this.prayerNames[prayer.toLowerCase()];
            const time = this.formatTime(this.prayerTimes[prayer]);
            const remaining = this.getTimeRemaining(this.prayerTimes[prayer]);
            
            return `
                <div class="prayer-time-item" data-prayer="${prayer.toLowerCase()}">
                    <div class="prayer-info">
                        <div class="prayer-name">${arabicName}</div>
                        ${remaining ? `<div class="remaining-time">${remaining}</div>` : ''}
                    </div>
                    <div class="prayer-time">${time}</div>
                </div>
            `;
        }).join('');

        prayersList.innerHTML = prayerElements;
    }

    // تحديد الصلاة الحالية والتالية
    checkCurrentPrayer() {
        const now = new Date();
        const currentTime = now.getHours() * 60 + now.getMinutes();
        
        const prayers = ['Fajr', 'Dhuhr', 'Asr', 'Maghrib', 'Isha'];
        let currentPrayer = -1;
        let nextPrayer = 0;
        
        for (let i = 0; i < prayers.length; i++) {
            const prayerTime = this.parseTime(this.prayerTimes[prayers[i]]);
            const prayerMinutes = prayerTime.hours * 60 + prayerTime.minutes;
            
            if (currentTime >= prayerMinutes) {
                currentPrayer = i;
                nextPrayer = (i + 1) % prayers.length;
            }
        }
        
        // إذا لم نصل لأي صلاة بعد، فالصلاة التالية هي الفجر
        if (currentPrayer === -1) {
            nextPrayer = 0; // الفجر
        }
        
        // تمييز الصلاة الحالية
        const prayerItems = document.querySelectorAll('.prayer-time-item');
        prayerItems.forEach((item, index) => {
            item.classList.remove('current');
            if (index === currentPrayer + 1) { // +1 للشروق
                item.classList.add('current');
            }
        });
        
        // تحديث معلومات الصلاة التالية
        this.updateNextPrayerInfo(prayers[nextPrayer]);
    }

    // تحديث معلومات الصلاة التالية
    updateNextPrayerInfo(nextPrayerKey) {
        const nextPrayerName = this.prayerNames[nextPrayerKey.toLowerCase()];
        const nextPrayerTime = this.prayerTimes[nextPrayerKey];
        
        this.updateElement('next-prayer-name', nextPrayerName);
        
        // بدء العداد التنازلي
        this.startCountdown(nextPrayerTime);
    }

    // بدء العداد التنازلي للصلاة التالية
    startCountdown(prayerTimeStr) {
        // إيقاف العداد السابق إن وجد
        if (this.nextPrayerTimer) {
            clearInterval(this.nextPrayerTimer);
        }
        
        this.nextPrayerTimer = setInterval(() => {
            const timeRemaining = this.calculateTimeRemaining(prayerTimeStr);
            this.updateElement('time-remaining', 
                `<span class="countdown-timer">${timeRemaining}</span>`);
        }, 1000);
    }

    // حساب الوقت المتبقي بالثواني
    calculateTimeRemaining(prayerTimeStr) {
        const now = new Date();
        const prayerTime = this.parseTime(prayerTimeStr);
        const prayer = new Date(now);
        prayer.setHours(prayerTime.hours, prayerTime.minutes, 0, 0);
        
        // إذا كان وقت الصلاة قد مضى اليوم، اجعله للغد
        if (prayer <= now) {
            prayer.setDate(prayer.getDate() + 1);
        }
        
        const diff = prayer - now;
        const hours = Math.floor(diff / (1000 * 60 * 60));
        const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
        const seconds = Math.floor((diff % (1000 * 60)) / 1000);
        
        // تنسيق العرض
        const hoursStr = hours.toString().padStart(2, '0');
        const minutesStr = minutes.toString().padStart(2, '0');
        const secondsStr = seconds.toString().padStart(2, '0');
        
        return `${hoursStr}:${minutesStr}:${secondsStr}`;
    }

    // حساب الوقت المتبقي للصلاة التالية
    getTimeRemaining(prayerTimeStr) {
        const now = new Date();
        const prayerTime = this.parseTime(prayerTimeStr);
        const prayer = new Date(now);
        prayer.setHours(prayerTime.hours, prayerTime.minutes, 0, 0);
        
        if (prayer < now) {
            prayer.setDate(prayer.getDate() + 1);
        }
        
        const diff = prayer - now;
        const hours = Math.floor(diff / (1000 * 60 * 60));
        const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
        
        if (hours > 0) {
            return `بعد ${hours} ساعة و ${minutes} دقيقة`;
        } else if (minutes > 0) {
            return `بعد ${minutes} دقيقة`;
        } else {
            return 'الآن';
        }
    }

    // تحويل وقت الصلاة إلى ساعات ودقائق
    parseTime(timeString) {
        const [hours, minutes] = timeString.split(':').map(Number);
        return { hours, minutes };
    }

    // تنسيق الوقت للعرض
    formatTime(timeString) {
        const [hours, minutes] = timeString.split(':');
        const hour = parseInt(hours);
        const ampm = hour >= 12 ? 'م' : 'ص';
        const displayHour = hour > 12 ? hour - 12 : (hour === 0 ? 12 : hour);
        return `${displayHour}:${minutes} ${ampm}`;
    }

    // عرض مواقيت افتراضية في حالة الخطأ
    showDefaultPrayerTimes() {
        const prayersList = document.getElementById('prayer-times-list');
        if (prayersList) {
            prayersList.innerHTML = `
                <div class="prayer-time-item">
                    <div class="prayer-name">الفجر</div>
                    <div class="prayer-time">05:30 ص</div>
                </div>
                <div class="prayer-time-item">
                    <div class="prayer-name">الشروق</div>
                    <div class="prayer-time">06:45 ص</div>
                </div>
                <div class="prayer-time-item current">
                    <div class="prayer-name">الظهر</div>
                    <div class="prayer-time">12:15 م</div>
                </div>
                <div class="prayer-time-item">
                    <div class="prayer-name">العصر</div>
                    <div class="prayer-time">03:30 م</div>
                </div>
                <div class="prayer-time-item">
                    <div class="prayer-name">المغرب</div>
                    <div class="prayer-time">06:45 م</div>
                </div>
                <div class="prayer-time-item">
                    <div class="prayer-name">العشاء</div>
                    <div class="prayer-time">08:15 م</div>
                </div>
            `;
        }
    }

    // تحديث بيانات الطقس
    async updateWeather() {
        if (!this.userLocation) return;

        try {
            const response = await fetch(
                `/api/weather?lat=${this.userLocation.latitude}&lng=${this.userLocation.longitude}`
            );
            
            if (response.ok) {
                const data = await response.json();
                this.displayWeather(data.weather);
            } else {
                throw new Error('فشل في جلب بيانات الطقس');
            }
        } catch (error) {
            console.error('خطأ في تحديث الطقس:', error);
            this.showDefaultWeather();
        }
    }

    // عرض بيانات الطقس المحسنة
    displayWeather(weather) {
        const weatherDisplay = document.getElementById('weather-display');
        if (!weatherDisplay) return;

        const weatherIcon = this.getWeatherIcon(weather.icon);
        const windDirection = this.getWindDirection(weather.wind_direction);
        
        weatherDisplay.innerHTML = `
            <div class="weather-main">
                <div class="weather-icon-container">
                    <div class="weather-icon">${weatherIcon}</div>
                    <div class="weather-animation"></div>
                </div>
                <div class="weather-temp-section">
                    <div class="weather-temp">${Math.round(weather.temperature)}°</div>
                    <div class="weather-feels-like">يشعر كـ ${Math.round(weather.feels_like)}°</div>
                </div>
            </div>
            <div class="weather-desc">${weather.description}</div>
            <div class="weather-details">
                <div class="weather-detail">
                    <span class="weather-detail-icon">💧</span>
                    <div class="weather-detail-info">
                        <div class="weather-detail-label">الرطوبة</div>
                        <div class="weather-detail-value">${weather.humidity}%</div>
                    </div>
                </div>
                <div class="weather-detail">
                    <span class="weather-detail-icon">🌪️</span>
                    <div class="weather-detail-info">
                        <div class="weather-detail-label">الرياح</div>
                        <div class="weather-detail-value">${weather.wind_speed} م/ث ${windDirection}</div>
                    </div>
                </div>
                <div class="weather-detail">
                    <span class="weather-detail-icon">👁️</span>
                    <div class="weather-detail-info">
                        <div class="weather-detail-label">الرؤية</div>
                        <div class="weather-detail-value">${weather.visibility} كم</div>
                    </div>
                </div>
                <div class="weather-detail">
                    <span class="weather-detail-icon">📊</span>
                    <div class="weather-detail-info">
                        <div class="weather-detail-label">الضغط</div>
                        <div class="weather-detail-value">${weather.pressure} هـ.ب</div>
                    </div>
                </div>
            </div>
            <div class="weather-footer">
                <div class="weather-update-time">
                    آخر تحديث: ${new Date().toLocaleTimeString('ar-SA', {hour: '2-digit', minute: '2-digit'})}
                </div>
            </div>
        `;
    }

    // تحديد اتجاه الرياح
    getWindDirection(degrees) {
        const directions = ['ش', 'ش.ش.ق', 'ش.ق', 'ش.ق.ق', 'ق', 'ج.ق.ق', 'ج.ق', 'ج.ج.ق', 'ج', 'ج.ج.غ', 'ج.غ', 'ج.غ.غ', 'غ', 'ش.غ.غ', 'ش.غ', 'ش.ش.غ'];
        return directions[Math.round(degrees / 22.5) % 16];
    }
                    <div class="weather-detail-value">${weather.feels_like}°</div>
                </div>
            </div>
        `;
    }

    // الحصول على أيقونة الطقس
    getWeatherIcon(iconCode) {
        const icons = {
            '01d': '☀️', '01n': '🌙',
            '02d': '🌤️', '02n': '☁️',
            '03d': '☁️', '03n': '☁️',
            '04d': '☁️', '04n': '☁️',
            '09d': '🌧️', '09n': '🌧️',
            '10d': '🌦️', '10n': '🌧️',
            '11d': '⛈️', '11n': '⛈️',
            '13d': '🌨️', '13n': '🌨️',
            '50d': '🌫️', '50n': '🌫️'
        };
        return icons[iconCode] || '🌤️';
    }

    // عرض طقس افتراضي
    showDefaultWeather() {
        const weatherDisplay = document.getElementById('weather-display');
        if (weatherDisplay) {
            weatherDisplay.innerHTML = `
                <div class="weather-main">
                    <div class="weather-icon">🌤️</div>
                    <div class="weather-temp">25°</div>
                </div>
                <div class="weather-desc">صافي جزئياً</div>
                <div class="weather-details">
                    <div class="weather-detail">
                        <div class="weather-detail-label">الرطوبة</div>
                        <div class="weather-detail-value">45%</div>
                    </div>
                    <div class="weather-detail">
                        <div class="weather-detail-label">الضغط</div>
                        <div class="weather-detail-value">1013 هكتوباسكال</div>
                    </div>
                    <div class="weather-detail">
                        <div class="weather-detail-label">الرؤية</div>
                        <div class="weather-detail-value">10 كم</div>
                    </div>
                    <div class="weather-detail">
                        <div class="weather-detail-label">الإحساس</div>
                        <div class="weather-detail-value">28°</div>
                    </div>
                </div>
            `;
        }
    }

    // تحديث اتجاه القبلة
    updateQiblaDirection() {
        if (!this.userLocation) return;

        try {
            // إحداثيات الكعبة المشرفة
            const kaaba = { lat: 21.4225, lng: 39.8262 };
            const user = { lat: this.userLocation.latitude, lng: this.userLocation.longitude };
            
            // حساب الاتجاه والمسافة
            const bearing = this.calculateBearing(user, kaaba);
            const distance = this.calculateDistance(user, kaaba);
            
            // تحديث البوصلة
            const needle = document.getElementById('compass-needle');
            if (needle) {
                needle.style.transform = `rotate(${bearing}deg)`;
            }
            
            // تحديث المعلومات
            this.updateElement('qibla-direction', `${Math.round(bearing)}° شمال شرق`);
            this.updateElement('qibla-distance', `${Math.round(distance)} كم من الكعبة المشرفة`);
            
        } catch (error) {
            console.error('خطأ في حساب اتجاه القبلة:', error);
            this.updateElement('qibla-direction', 'شمال شرق');
            this.updateElement('qibla-distance', '--- كم');
        }
    }

    // حساب الاتجاه بين نقطتين
    calculateBearing(from, to) {
        const lat1 = from.lat * Math.PI / 180;
        const lat2 = to.lat * Math.PI / 180;
        const deltaLng = (to.lng - from.lng) * Math.PI / 180;
        
        const x = Math.sin(deltaLng) * Math.cos(lat2);
        const y = Math.cos(lat1) * Math.sin(lat2) - Math.sin(lat1) * Math.cos(lat2) * Math.cos(deltaLng);
        
        let bearing = Math.atan2(x, y) * 180 / Math.PI;
        return (bearing + 360) % 360;
    }

    // حساب المسافة بين نقطتين
    calculateDistance(from, to) {
        const R = 6371; // نصف قطر الأرض بالكيلومتر
        const lat1 = from.lat * Math.PI / 180;
        const lat2 = to.lat * Math.PI / 180;
        const deltaLat = (to.lat - from.lat) * Math.PI / 180;
        const deltaLng = (to.lng - from.lng) * Math.PI / 180;
        
        const a = Math.sin(deltaLat/2) * Math.sin(deltaLat/2) +
                  Math.cos(lat1) * Math.cos(lat2) *
                  Math.sin(deltaLng/2) * Math.sin(deltaLng/2);
        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
        
        return R * c;
    }

    // تحديث موقع جديد من المودال
    setLocation(cityName, lat, lng) {
        this.userLocation = {
            latitude: lat,
            longitude: lng,
            city: cityName
        };
        
        // حفظ الموقع الجديد
        localStorage.setItem('userLocation', JSON.stringify(this.userLocation));
        
        // تحديث العرض
        this.updateLocationDisplay();
        
        // تحديث البيانات
        this.updatePrayerTimes();
        this.updateWeather();
        this.updateQiblaDirection();
        
        this.showSuccessMessage(`تم تحديث الموقع إلى ${cityName}`);
    }

    // وظائف مساعدة
    updateElement(id, content) {
        const element = document.getElementById(id);
        if (element) {
            element.textContent = content;
        }
    }

    showSuccessMessage(message) {
        const successMsg = document.getElementById('success-message');
        if (successMsg) {
            successMsg.textContent = message;
            successMsg.classList.add('show');
            
            setTimeout(() => {
                successMsg.classList.remove('show');
            }, 3000);
        }
    }
}

// وظائف المودال والتنقل
function openLocationModal() {
    const modal = document.getElementById('cityModal');
    if (modal) {
        modal.style.display = 'flex';
        document.body.style.overflow = 'hidden';
    }
}

function closeLocationModal() {
    const modal = document.getElementById('cityModal');
    if (modal) {
        modal.style.display = 'none';
        document.body.style.overflow = 'auto';
    }
}

function selectCity(cityName, lat, lng) {
    if (window.enhancedDashboard) {
        window.enhancedDashboard.setLocation(cityName, lat, lng);
    }
    closeLocationModal();
}

function useCurrentLocation() {
    if (navigator.geolocation) {
        const btn = event.target;
        const originalText = btn.innerHTML;
        btn.innerHTML = '<span>⏳</span> جاري التحديد...';
        btn.disabled = true;
        
        navigator.geolocation.getCurrentPosition(
            async (position) => {
                const lat = position.coords.latitude;
                const lng = position.coords.longitude;
                
                // الحصول على اسم المدينة
                try {
                    const response = await fetch(`/api/city-name?lat=${lat}&lng=${lng}`);
                    const data = await response.json();
                    const cityName = data.city || 'موقعك الحالي';
                    
                    if (window.enhancedDashboard) {
                        window.enhancedDashboard.setLocation(cityName, lat, lng);
                    }
                } catch (error) {
                    if (window.enhancedDashboard) {
                        window.enhancedDashboard.setLocation('موقعك الحالي', lat, lng);
                    }
                }
                
                closeLocationModal();
                btn.innerHTML = originalText;
                btn.disabled = false;
            },
            (error) => {
                alert('تعذر الحصول على موقعك الحالي. يرجى اختيار مدينة من القائمة.');
                btn.innerHTML = originalText;
                btn.disabled = false;
            }
        );
    }
}

function showRegion(region) {
    // إخفاء جميع المناطق
    const regions = document.querySelectorAll('.region-cities');
    regions.forEach(r => r.classList.remove('active'));
    
    // إزالة الفئة النشطة من جميع الأزرار
    const tabs = document.querySelectorAll('.tab-btn');
    tabs.forEach(t => t.classList.remove('active'));
    
    // إظهار المنطقة المحددة
    document.getElementById(region + '-cities').classList.add('active');
    
    // إضافة الفئة النشطة للزر المحدد
    event.target.classList.add('active');
    
    // مسح البحث عند تغيير المنطقة
    document.getElementById('citySearchInput').value = '';
    filterCities();
}

function filterCities() {
    const searchTerm = document.getElementById('citySearchInput').value.toLowerCase().trim();
    const activeRegion = document.querySelector('.region-cities.active');
    const cityButtons = activeRegion.querySelectorAll('.city-btn');
    
    cityButtons.forEach(btn => {
        const cityText = btn.textContent.toLowerCase();
        if (cityText.includes(searchTerm)) {
            btn.style.display = 'block';
        } else {
            btn.style.display = 'none';
        }
    });
}

// وظائف الإجراءات السريعة
function openQuranReader() {
    window.open('/quran', '_blank');
}

function openTasbeh() {
    window.open('/tasbeh', '_blank');
}

function openAzkar() {
    window.open('/azkar', '_blank');
}

function openHadith() {
    window.open('/hadith', '_blank');
}

// إغلاق المودال عند النقر خارجه
document.addEventListener('click', (e) => {
    const modal = document.getElementById('cityModal');
    if (e.target === modal) {
        closeLocationModal();
    }
});

// تهيئة التطبيق عند تحميل الصفحة
document.addEventListener('DOMContentLoaded', () => {
    window.enhancedDashboard = new EnhancedIslamicDashboard();
});

// CSS للمودال (إذا لم يكن موجوداً)
const modalStyles = `
    .location-modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.8);
        z-index: 10000;
        backdrop-filter: blur(5px);
        align-items: center;
        justify-content: center;
        padding: 20px;
    }

    .modal-content {
        background: linear-gradient(135deg, #1E293B 0%, #0F172A 100%);
        border-radius: 20px;
        padding: 30px;
        max-width: 600px;
        width: 100%;
        max-height: 80vh;
        overflow-y: auto;
        border: 1px solid rgba(255, 215, 0, 0.3);
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.5);
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
        color: #FFD700;
        font-size: 1.5rem;
        font-weight: 600;
    }

    .close-modal {
        background: none;
        border: none;
        color: #FFD700;
        font-size: 2rem;
        cursor: pointer;
        padding: 0;
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
        transition: all 0.3s ease;
    }

    .close-modal:hover {
        background: rgba(255, 215, 0, 0.1);
        transform: rotate(90deg);
    }

    .current-location-btn {
        width: 100%;
        background: linear-gradient(135deg, #2E8B57, #228B22);
        color: white;
        border: none;
        padding: 15px;
        border-radius: 12px;
        font-size: 1.1rem;
        font-weight: 600;
        cursor: pointer;
        margin-bottom: 20px;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 10px;
    }

    .current-location-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(46, 139, 87, 0.4);
    }

    .search-container {
        position: relative;
        margin-bottom: 20px;
    }

    .search-container input {
        width: 100%;
        padding: 15px;
        border: 1px solid rgba(255, 215, 0, 0.3);
        border-radius: 12px;
        background: rgba(255, 255, 255, 0.1);
        color: white;
        font-size: 1rem;
        text-align: right;
    }

    .search-container input::placeholder {
        color: rgba(255, 255, 255, 0.6);
    }

    .region-tabs {
        display: flex;
        gap: 10px;
        margin-bottom: 20px;
    }

    .tab-btn {
        flex: 1;
        padding: 12px;
        border: 1px solid rgba(255, 215, 0, 0.3);
        border-radius: 10px;
        background: rgba(255, 255, 255, 0.05);
        color: white;
        font-size: 1rem;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .tab-btn.active {
        background: linear-gradient(135deg, #FFD700, #FFA500);
        color: #0F172A;
        border-color: #FFD700;
    }

    .tab-btn:hover {
        background: rgba(255, 215, 0, 0.1);
    }

    .cities-container {
        max-height: 300px;
        overflow-y: auto;
    }

    .region-cities {
        display: none;
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        gap: 10px;
    }

    .region-cities.active {
        display: grid;
    }

    .city-btn {
        padding: 12px;
        border: 1px solid rgba(255, 215, 0, 0.3);
        border-radius: 8px;
        background: rgba(255, 255, 255, 0.05);
        color: white;
        font-size: 1rem;
        cursor: pointer;
        transition: all 0.3s ease;
        text-align: center;
    }

    .city-btn:hover {
        background: linear-gradient(135deg, #FFD700, #FFA500);
        color: #0F172A;
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(255, 215, 0, 0.3);
    }
`;

// إضافة الأنماط إلى الصفحة
const styleSheet = document.createElement('style');
styleSheet.textContent = modalStyles;
document.head.appendChild(styleSheet);
